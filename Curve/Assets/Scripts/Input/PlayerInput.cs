//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Map"",
            ""id"": ""04f8dcfc-a89f-4e61-89c2-609df7d9c552"",
            ""actions"": [
                {
                    ""name"": ""PutLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""061b1ae0-e20e-4381-a239-f8c8466133e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""59f48de2-117c-4f4c-a6e5-78a641316a1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PutRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""ad6241c3-1834-47bd-820b-1116fd52f0d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeadRotating"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fda414c5-4068-4b51-9c07-4069baf0b13a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed8dab6d-b845-4a5d-9f8a-f27748328a49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PutLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d357bf55-e2af-4cc5-ba4d-80092d0f00f4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20b2f2d9-92f5-4723-95cd-8110e26a697a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PutRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""719ec454-e5fc-4b4f-88bc-1c2d6e9b1e04"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadRotating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_PutLeftHand = m_Map.FindAction("PutLeftHand", throwIfNotFound: true);
        m_Map_Push = m_Map.FindAction("Push", throwIfNotFound: true);
        m_Map_PutRightHand = m_Map.FindAction("PutRightHand", throwIfNotFound: true);
        m_Map_HeadRotating = m_Map.FindAction("HeadRotating", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map
    private readonly InputActionMap m_Map;
    private List<IMapActions> m_MapActionsCallbackInterfaces = new List<IMapActions>();
    private readonly InputAction m_Map_PutLeftHand;
    private readonly InputAction m_Map_Push;
    private readonly InputAction m_Map_PutRightHand;
    private readonly InputAction m_Map_HeadRotating;
    public struct MapActions
    {
        private @PlayerInput m_Wrapper;
        public MapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PutLeftHand => m_Wrapper.m_Map_PutLeftHand;
        public InputAction @Push => m_Wrapper.m_Map_Push;
        public InputAction @PutRightHand => m_Wrapper.m_Map_PutRightHand;
        public InputAction @HeadRotating => m_Wrapper.m_Map_HeadRotating;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void AddCallbacks(IMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsCallbackInterfaces.Add(instance);
            @PutLeftHand.started += instance.OnPutLeftHand;
            @PutLeftHand.performed += instance.OnPutLeftHand;
            @PutLeftHand.canceled += instance.OnPutLeftHand;
            @Push.started += instance.OnPush;
            @Push.performed += instance.OnPush;
            @Push.canceled += instance.OnPush;
            @PutRightHand.started += instance.OnPutRightHand;
            @PutRightHand.performed += instance.OnPutRightHand;
            @PutRightHand.canceled += instance.OnPutRightHand;
            @HeadRotating.started += instance.OnHeadRotating;
            @HeadRotating.performed += instance.OnHeadRotating;
            @HeadRotating.canceled += instance.OnHeadRotating;
        }

        private void UnregisterCallbacks(IMapActions instance)
        {
            @PutLeftHand.started -= instance.OnPutLeftHand;
            @PutLeftHand.performed -= instance.OnPutLeftHand;
            @PutLeftHand.canceled -= instance.OnPutLeftHand;
            @Push.started -= instance.OnPush;
            @Push.performed -= instance.OnPush;
            @Push.canceled -= instance.OnPush;
            @PutRightHand.started -= instance.OnPutRightHand;
            @PutRightHand.performed -= instance.OnPutRightHand;
            @PutRightHand.canceled -= instance.OnPutRightHand;
            @HeadRotating.started -= instance.OnHeadRotating;
            @HeadRotating.performed -= instance.OnHeadRotating;
            @HeadRotating.canceled -= instance.OnHeadRotating;
        }

        public void RemoveCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IMapActions
    {
        void OnPutLeftHand(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnPutRightHand(InputAction.CallbackContext context);
        void OnHeadRotating(InputAction.CallbackContext context);
    }
}
